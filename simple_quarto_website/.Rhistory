main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
average_estimated_probabilities[i] <-  MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[0])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
average_estimated_probabilities[i] <-  MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[0])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
MC_prob <- function(num_iterations,prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size)
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B, prob_C))
events <- replicate(num_iterations, samples)
(tab <- table(events))
prob_values <- prop.table(tab)
prob_like_A <- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'A') ,replace = TRUE, prob = c(prob_like_feature_A,1-prob_like_feature_A)))
(tab1 <- table(prob_like_A))
prob_values_A <- prop.table(tab1)
prob_like_B<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'B') ,replace = TRUE, prob = c(prob_like_feature_B,1-prob_like_feature_B)))
(tab2 <- table(prob_like_B))
prob_values_B <- prop.table(tab2)
prob_like_C<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'C') ,replace = TRUE, prob = c(prob_like_feature_C,1-prob_like_feature_C)))
(tab3 <- table(prob_like_C))
prob_values_C <- prop.table(tab3)
print(prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size))
}
#MC simulation for four iterations
MC_prob(10000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(8000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(5000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(3000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
#print(paste0("the MC probability that if a person liked the phone then they are currently using an iPhone is ",))
MC_prob <- function(num_iterations,prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size)
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B, prob_C))
events <- replicate(num_iterations, samples)
(tab <- table(events))
prob_values <- prop.table(tab)
prob_like_A <- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'A') ,replace = TRUE, prob = c(prob_like_feature_A,1-prob_like_feature_A)))
(tab1 <- table(prob_like_A))
prob_values_A <- prop.table(tab1)
prob_like_B<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'B') ,replace = TRUE, prob = c(prob_like_feature_B,1-prob_like_feature_B)))
(tab2 <- table(prob_like_B))
prob_values_B <- prop.table(tab2)
prob_like_C<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'C') ,replace = TRUE, prob = c(prob_like_feature_C,1-prob_like_feature_C)))
(tab3 <- table(prob_like_C))
prob_values_C <- prop.table(tab3)
print(prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size))
return prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size)
MC_prob <- function(num_iterations,prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size)
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B, prob_C))
events <- replicate(num_iterations, samples)
(tab <- table(events))
prob_values <- prop.table(tab)
prob_like_A <- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'A') ,replace = TRUE, prob = c(prob_like_feature_A,1-prob_like_feature_A)))
(tab1 <- table(prob_like_A))
prob_values_A <- prop.table(tab1)
prob_like_B<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'B') ,replace = TRUE, prob = c(prob_like_feature_B,1-prob_like_feature_B)))
(tab2 <- table(prob_like_B))
prob_values_B <- prop.table(tab2)
prob_like_C<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'C') ,replace = TRUE, prob = c(prob_like_feature_C,1-prob_like_feature_C)))
(tab3 <- table(prob_like_C))
prob_values_C <- prop.table(tab3)
print(prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size))
answer <- prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size)
return answer
MC_prob <- function(num_iterations,prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size)
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B, prob_C))
events <- replicate(num_iterations, samples)
(tab <- table(events))
prob_values <- prop.table(tab)
prob_like_A <- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'A') ,replace = TRUE, prob = c(prob_like_feature_A,1-prob_like_feature_A)))
(tab1 <- table(prob_like_A))
prob_values_A <- prop.table(tab1)
prob_like_B<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'B') ,replace = TRUE, prob = c(prob_like_feature_B,1-prob_like_feature_B)))
(tab2 <- table(prob_like_B))
prob_values_B <- prop.table(tab2)
prob_like_C<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'C') ,replace = TRUE, prob = c(prob_like_feature_C,1-prob_like_feature_C)))
(tab3 <- table(prob_like_C))
prob_values_C <- prop.table(tab3)
print(prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size))
answer <- prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size)
return(answer)
}
#MC simulation for four iterations
MC_prob(10000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(8000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
average_estimated_probabilities[i] <-  MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[0])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
print(values)
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[0])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[0])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
i
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
print(i)
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[1])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[2])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities[3])
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in 1:value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(x, y, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in 1:value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(iteration_values, average_estimated_probabilities, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0, 1),
main = "Estimated Probability vs. Number of Iterations")
x <- c(200,300)
y <- c(0.1,0.2)
iteration_values <- c(200, 300)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in 1:value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(iteration_values, average_estimated_probabilities, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0.5, 0.6),
main = "Estimated Probability vs. Number of Iterations")
iteration_values <- c(200, 300, 400, 2000, 3000, 5000 ,8000, 10000, 12000, 15000)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in 1:value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(iteration_values, average_estimated_probabilities, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0.5, 0.6),
main = "Estimated Probability vs. Number of Iterations")
#iteration_values <- c(200, 300, 400, 2000, 3000, 5000 ,8000, 10000, 12000, 15000)
iteration_values <- c(8000, 10000, 12000, 15000, 20000,30000)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in 1:value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(iteration_values, average_estimated_probabilities, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0.5, 0.6),
main = "Estimated Probability vs. Number of Iterations")
iteration_values <- c(200, 300, 400, 2000, 3000, 5000 ,8000, 10000, 12000, 15000)
#iteration_values <- c(8000, 10000, 12000, 15000, 20000,30000)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in 1:value_length)
{
#(iteration_values[i])
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
#print(MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757))
}
print(average_estimated_probabilities)
#print(iteration_values)
plot(iteration_values, average_estimated_probabilities, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0.5, 0.6),
main = "Estimated Probability vs. Number of Iterations")
print(paste0("probability that if a person liked the phone then they are currently using an iPhone for California is ",prob_using_iphone_like_feature(0.4013,0.38157,0.2164, 0.92, 0.48, 0.67)))
print(paste0("probability that if a person liked the phone then they are currently using an iPhone for California is ",MC_prob(10000,0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
print(paste0("probability that if a person liked the phone then they are currently using an iPhone for California is ",MC_prob(100,0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
prob_any_state <- function(prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size )
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B,prob_C))
like_feature <- rep(NA, num_simulations) # create a dummy variable first
like_feature[samples=='A'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='A'), replace=TRUE,                                            prob=c(prob_like_feature_A,1-prob_like_feature_A))
like_feature[samples=='B'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='B'),           replace=TRUE,prob=c(prob_like_feature_B, 1-prob_like_feature_B))
like_feature[samples=='C'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='C'), replace=TRUE,prob=c(prob_like_feature_C, 1-prob_like_feature_C))
#prob_like_feature_given_using_iphone is the probabitlity that the person like new feature given currently using iphone
prob_like_feature_given_using_iphone <-  mean(like_feature[samples =='A']=='like_feature')
prob_like_feature <- (prob_A * mean(like_feature[samples =='A']=='like_feature')) + (prob_B * mean(like_feature[samples =='B']=='like_feature')) + (prob_C * mean(like_feature[samples =='C']=='like_feature'))
#prob_using_iphone_given_like_feature is the probability that if a person liked the phone then they are currently using an iPhone.
prob_using_iphone_given_like_feature <- (prob_like_feature_given_using_iphone * prob_A) / prob_like_feature
}
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4491,0.2443, 0.30647, 0.80, 0.52, 0.48,757)))
#need to find the probability of currently using iphone provided they liked the new feature
prob_using_iphone_like_feature <- function(prob_A,prob_B, prob_C, prob_like_feature_given_A,      prob_like_feature_given_B,prob_like_feature_given_C)
{
prob_like_feature <- (prob_A * prob_like_feature_given_A) +  (prob_B * prob_like_feature_given_B) + (prob_C *    prob_like_feature_given_C)
prob_using_iphone_like_feature <- ((prob_like_feature_given_A) * (prob_A)) / prob_like_feature
}
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_using_iphone_like_feature(0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48)))
MC_prob <- function(num_iterations,prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size)
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B, prob_C))
events <- replicate(num_iterations, samples)
(tab <- table(events))
prob_values <- prop.table(tab)
prob_like_A <- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'A') ,replace = TRUE, prob = c(prob_like_feature_A,1-prob_like_feature_A)))
(tab1 <- table(prob_like_A))
prob_values_A <- prop.table(tab1)
prob_like_B<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'B') ,replace = TRUE, prob = c(prob_like_feature_B,1-prob_like_feature_B)))
(tab2 <- table(prob_like_B))
prob_values_B <- prop.table(tab2)
prob_like_C<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'C') ,replace = TRUE, prob = c(prob_like_feature_C,1-prob_like_feature_C)))
(tab3 <- table(prob_like_C))
prob_values_C <- prop.table(tab3)
answer <- prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size)
return(answer)
}
#MC simulation for four iterations
MC_prob(10000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(8000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(5000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(3000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
#print(paste0("the MC probability that if a person liked the phone then they are currently using an iPhone is ",))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone for California is ",MC_prob(10000,0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
print(paste0("probability that if a person liked the phone then they are currently using an iPhone for California is ",prob_using_iphone_like_feature(0.4013,0.38157,0.2164, 0.92, 0.48, 0.67)))
prob_any_state <- function(prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size )
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B,prob_C))
like_feature <- rep(NA, sample_size) # create a dummy variable first
like_feature[samples=='A'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='A'), replace=TRUE,                                            prob=c(prob_like_feature_A,1-prob_like_feature_A))
like_feature[samples=='B'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='B'),           replace=TRUE,prob=c(prob_like_feature_B, 1-prob_like_feature_B))
like_feature[samples=='C'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='C'), replace=TRUE,prob=c(prob_like_feature_C, 1-prob_like_feature_C))
#prob_like_feature_given_using_iphone is the probabitlity that the person like new feature given currently using iphone
prob_like_feature_given_using_iphone <-  mean(like_feature[samples =='A']=='like_feature')
prob_like_feature <- (prob_A * mean(like_feature[samples =='A']=='like_feature')) + (prob_B * mean(like_feature[samples =='B']=='like_feature')) + (prob_C * mean(like_feature[samples =='C']=='like_feature'))
#prob_using_iphone_given_like_feature is the probability that if a person liked the phone then they are currently using an iPhone.
prob_using_iphone_given_like_feature <- (prob_like_feature_given_using_iphone * prob_A) / prob_like_feature
}
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4491,0.2443, 0.30647, 0.80, 0.52, 0.48,757)))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4491,0.2443, 0.30647, 0.80, 0.52, 0.48,757)))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4491,0.2443, 0.30647, 0.80, 0.52, 0.48,757)))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4491,0.2443, 0.30647, 0.80, 0.52, 0.48,757)))
knitr::opts_chunk$set(echo = TRUE)
prob_any_state <- function(prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size )
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B,prob_C))
like_feature <- rep(NA, sample_size) # create a dummy variable first
like_feature[samples=='A'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='A'), replace=TRUE,                                            prob=c(prob_like_feature_A,1-prob_like_feature_A))
like_feature[samples=='B'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='B'),           replace=TRUE,prob=c(prob_like_feature_B, 1-prob_like_feature_B))
like_feature[samples=='C'] <- sample(c('like_feature','dislike_feature'), size=sum(samples=='C'), replace=TRUE,prob=c(prob_like_feature_C, 1-prob_like_feature_C))
#prob_like_feature_given_using_iphone is the probabitlity that the person like new feature given currently using iphone
prob_like_feature_given_using_iphone <-  mean(like_feature[samples =='A']=='like_feature')
prob_like_feature <- (prob_A * mean(like_feature[samples =='A']=='like_feature')) + (prob_B * mean(like_feature[samples =='B']=='like_feature')) + (prob_C * mean(like_feature[samples =='C']=='like_feature'))
#prob_using_iphone_given_like_feature is the probability that if a person liked the phone then they are currently using an iPhone.
prob_using_iphone_given_like_feature <- (prob_like_feature_given_using_iphone * prob_A) / prob_like_feature
}
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4491,0.2443, 0.30647, 0.80, 0.52, 0.48,757)))
#need to find the probability of currently using iphone provided they liked the new feature
prob_using_iphone_like_feature <- function(prob_A,prob_B, prob_C, prob_like_feature_given_A,      prob_like_feature_given_B,prob_like_feature_given_C)
{
prob_like_feature <- (prob_A * prob_like_feature_given_A) +  (prob_B * prob_like_feature_given_B) + (prob_C *    prob_like_feature_given_C)
prob_using_iphone_like_feature <- ((prob_like_feature_given_A) * (prob_A)) / prob_like_feature
}
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_using_iphone_like_feature(0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48)))
MC_prob <- function(num_iterations,prob_A, prob_B,prob_C, prob_like_feature_A,prob_like_feature_B, prob_like_feature_C, sample_size)
{
samples <- sample(c('A','B', 'C'), size = sample_size,replace = TRUE, prob = c(prob_A,prob_B, prob_C))
events <- replicate(num_iterations, samples)
(tab <- table(events))
prob_values <- prop.table(tab)
prob_like_A <- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'A') ,replace = TRUE, prob = c(prob_like_feature_A,1-prob_like_feature_A)))
(tab1 <- table(prob_like_A))
prob_values_A <- prop.table(tab1)
prob_like_B<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'B') ,replace = TRUE, prob = c(prob_like_feature_B,1-prob_like_feature_B)))
(tab2 <- table(prob_like_B))
prob_values_B <- prop.table(tab2)
prob_like_C<- replicate(num_iterations, sample(c('like_feature','dislike_feature'), size = sum(samples == 'C') ,replace = TRUE, prob = c(prob_like_feature_C,1-prob_like_feature_C)))
(tab3 <- table(prob_like_C))
prob_values_C <- prop.table(tab3)
answer <- prob_any_state(prob_values['A'],prob_values['B'],prob_values['C'],prob_values_A['like_feature'],prob_values_B['like_feature'],prob_values_C['like_feature'],sample_size)
return(answer)
}
#MC simulation for four iterations
MC_prob(10000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(8000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(5000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
MC_prob(3000, 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
iteration_values <- c(200, 300, 400, 2000, 3000, 5000 ,8000, 10000, 12000, 15000)
average_estimated_probabilities <- c()
value_length <- length(iteration_values)
for(i in 1:value_length)
{
values <- MC_prob(iteration_values[i], 0.4491, 0.2443, 0.30647, 0.80, 0.52, 0.48,757)
average_estimated_probabilities[i] <-  values
}
plot(iteration_values, average_estimated_probabilities, type = "l",
xlab = "Number of Iterations", ylab = "Average Estimated Probability", xlim=c(200,15000), ylim=c(0.5, 0.6),
main = "Estimated Probability vs. Number of Iterations")
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone is ",prob_any_state(0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
set.seed(140)
print(paste0("probability that if a person liked the phone then they are currently using an iPhone for California is ",MC_prob(10000,0.4013,0.38157,0.2164, 0.92, 0.48, 0.67,1520)))
print(paste0("probability that if a person liked the phone then they are currently using an iPhone for California is ",prob_using_iphone_like_feature(0.4013,0.38157,0.2164, 0.92, 0.48, 0.67)))
a_param = "a_name"
quarto_render(input = "my_file_to_render.qmd",
output_file = paste0(".\\HTML\\my_file_to_render","_",today(), '.html'),
execute_params =list(pcn = a_param),
output_format='html')
